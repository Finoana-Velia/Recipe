package com.example.Finoana.Service.Impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.example.Finoana.Dto.InvoiceRequestDto;
import com.example.Finoana.Dto.InvoiceResponseDto;
import com.example.Finoana.Entity.Account;
import com.example.Finoana.Entity.Invoice;
import com.example.Finoana.Entity.Product;
import com.example.Finoana.Exception.ResourceNotFoundException;
import com.example.Finoana.Repository.AccountRepository;
import com.example.Finoana.Repository.InvoiceRepository;
import com.example.Finoana.Repository.ProductRepository;
import com.example.Finoana.Service.InvoiceService;
import static com.example.Finoana.Core.EntityMapper.*;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import lombok.AllArgsConstructor;


@Service
@AllArgsConstructor
public class InvoiceServiceImpl implements InvoiceService{
	
	private InvoiceRepository invoiceRepository;
	private ProductRepository productRepository;
	private AccountRepository accountRepository;
	
	@Override
	public Page<InvoiceResponseDto> searchInvoiceByReference(String reference, Pageable request) {
		return this.invoiceRepository.searchInvoiceByReference(reference, request).map(
				invoice -> toDto(invoice,InvoiceResponseDto.class)
				);
	}

	@Override
	public InvoiceResponseDto findById(Long id) {
		return this.invoiceRepository.findById(id).map(
				invoice -> toDto(invoice,InvoiceResponseDto.class)
				).orElseThrow(
						() -> new ResourceNotFoundException("Invoice with the id :" + id + " is not found")
						);
	}

	@Override
	public InvoiceResponseDto createInvoice(InvoiceRequestDto invoice) {
		Invoice invoiceMapped = toEntity(invoice,Invoice.class);
		invoiceMapped.setCreatedAt(LocalDateTime.now());
		if(invoice.getIdAccount() != null) {
			Account owner = this.findAccountById(invoice.getIdAccount());
			invoiceMapped.setAccount(owner);
		}
		List<Product> productList = new ArrayList<>();
		invoice.getProductIds().forEach(
				idProduct -> {
					Product productFound = this.findProductById(idProduct);
					productList.add(productFound);
				}
				);
		invoiceMapped.setProducts(productList);
		Invoice invoiceSaved = this.invoiceRepository.save(invoiceMapped);
		return toDto(invoiceSaved, InvoiceResponseDto.class);
	}

	@Override
	public InvoiceResponseDto updateInvoice(Long id, InvoiceRequestDto invoice) {
		return null;
	}

	@Override
	public void deleteById(Long id) {
		// TODO Auto-generated method stub
		
	}
	
	private Account findAccountById(Long id) {
		return this.accountRepository.findById(id).orElseThrow(
				() -> new ResourceNotFoundException("Account not found")
				);
	}
	
	private Product findProductById(Long id) {
		return this.productRepository.findById(id).orElseThrow(
				() -> new ResourceNotFoundException("Product not found")
				);
	}
	

}
